# MegaLinter GitHub Action configuration
# https://megalinter.io
name: MegaLinter

on:
  # Trigger mega-linter on every push
  push:
  pull_request:
    branches: [main]

env:
  APPLY_FIXES: all
  APPLY_FIXES_EVENT: all
  APPLY_FIXES_MODE: commit
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  push_to_registry:
    name: Push Docker image to Docker GitHub
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4.1.1

      # - name: Install cosign
      #   if: github.event_name != 'pull_request'
      #   uses: sigstore/cosign-installer@e1523de7571e31dbe865fd2e80c5c7c23ae71eb4
      #   with:
      #     cosign-release: 'v2.2.3'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226
        with:
          version: latest

      - name: Login to Docker Hub
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # - name: Login to Docker Hub
      #   if: github.event_name != 'pull_request'
      #   uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d
      #   with:
      #     registry: ${{ env.REGISTRY }}
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # - name: Cache Docker layers
      #   id: cache
      #   uses: actions/cache@v4.0.0
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ runner.os }}-buildx-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-buildx-

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@f206c36955d3cc6213c38fb3747d9ba4113e686a
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

      # - name: Sign the published Docker image
      #   env:
      #     COSIGN_EXPERIMENTAL: 'true'
      #   run: cosign sign ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}

  # megalinter:
  #   name: MegaLinter
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: write
  #     issues: write
  #     pull-requests: write
  #   steps:
  #     # Checkout the github repository
  #     - name: Checkout Code
  #       uses: actions/checkout@v4.1.1
  #       with:
  #         token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}

  #     - name: ScribeMD Docker Cache
  #       uses: ScribeMD/docker-cache@e481e638abdb45e2fa30845305c387a544cc617f
  #       with:
  #         key: ${{ runner.os }}-docker-image-${{ hashFiles('**/pnpm-lock.yaml') }}

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3.0.0

  #     - name: Cache Docker layers
  #       uses: actions/cache@v4.0.0
  #       with:
  #         path: /tmp/.docker-images
  #         key: ${{ runner.os }}-docker-image-${{ hashFiles('**/pnpm-lock.yaml') }}

  #     - name: Save Docker Cache
  #       uses: actions/cache/save@v4.0.0
  #       with:
  #         path: /tmp/.docker-images
  #         key: ${{ runner.os }}-docker-image-${{ hashFiles('**/pnpm-lock.yaml') }}

  # - name: Load cached Docker image
  #   run: |
  #     if [ -f "/tmp/.docker-images/megalinter.tar" ]; then
  #       echo "Loading cache of Docker image";
  #       docker load < /tmp/.docker-images/megalinter.tar
  #     fi

  # - name: Pull and Save Docker Image
  #   run: |
  #     if [ ! docker images oxsecurity/megalinter | grep -q oxsecurity/megalinter; ] then
  #       echo "Pulling Docker image";
  #       docker pull oxsecurity/megalinter:latest
  #       mkdir -p /tmp/.docker-images
  #       docker save oxsecurity/megalinter:latest > /tmp/.docker-images/megalinter.tar
  #     fi

  # - name: Log in to Dockerhub
  #   uses: docker/login-action@v3.0.0
  #   with:
  #     username: ${{ secrets.DOCKERHUB_USERNAME }}
  #     password: ${{ secrets.DOCKERHUB_PASSWORD }}

  # - name: Pull and Build Docker Image
  #   uses: docker/build-push-action@v5.1.0
  #   with:
  #     context: .
  #     tags: areid987/megalinter:latest
  #     outputs: type=docker, dest=/tmp/.docker-images/megalinter.tar

  # - name: Move and Save Cache
  #   run: |
  #     rm -rf /tmp/.buildx-cache
  #     mv /tmp/.docker-images/megalinter-new /tmp/.docker-images/megalinter

  # - name: MegaLinter
  #   id: ml
  #   # https://megalinter.io/flavors
  #   uses: docker://oxsecurity/megalinter:latest
  #   env:
  #     #  https://megalinter.io/configuration
  #     VALIDATE_ALL_CODEBASE: 'true'
  #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # # Upload MegaLinter artifacts
  # - name: Archive production artifacts
  #   if: success() || failure()
  #   uses: actions/upload-artifact@v4.3.1
  #   with:
  #     name: MegaLinter reports
  #     path: |
  #       /tmp/.docker-images/megalinter.tar
  #       megalinter-reports
  #       megalinter.log
  # #  Create pull request if applicablie
  # - name: Create Pull Request with applied fixes
  #   id: cpr
  #   if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'pull_request' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && !contains(github.event.head_commit.message, 'skip fix')
  #   uses: peter-evans/create-pull-request@b1ddad2c994a25fbc81a28b3ec0e368bb2021c50
  #   with:
  #     token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
  #     commit-message: '[MegaLinter] Apply linters automatic fixes'
  #     title: '[MegaLinter] Apply linters automatic fixes'
  #     labels: bot

  # - name: Create PR output
  #   if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'commit' && github.ref != 'refs/heads/main' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && !contains(github.event.head_commit.message, 'skip fix')
  #   run: sudo chown -Rc $UID .git/

  # - name: Commit and push applied linter fixes
  #   if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'commit' && github.ref != 'refs/heads/main' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && !contains(github.event.head_commit.message, 'skip fix')
  #   uses: stefanzweifel/git-auto-commit-action@e040c596f0a65570b339c60818081175bcf82d11
  #   with:
  #     branch: ${{ github.event.pull_request.head.ref || github.head_ref || github.ref }}
  #     commit_message: '[MegaLinter] Apply linters fixes'
  #     commit_user_name: megalinter-bot
  #     commit_user_email: read.musik@gmail.com
